"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from __future__ import annotations
from pathlib import Path
import os
import os
from pathlib import Path
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured
BASE_DIR = Path(__file__).resolve().parent.parent
DOTENV_PATH = BASE_DIR / ".env"
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


import os
from typing import Optional, Iterable


if not DOTENV_PATH.exists():
    # helpful debug message if path is wrong
    raise ImproperlyConfigured(f".env file not found at: {DOTENV_PATH}")

# load that specific .env file
load_dotenv(DOTENV_PATH)

def env_or_fail(key: str) -> str:
    v = os.getenv(key)
    if v is None or v == "":
        raise ImproperlyConfigured(f"Missing required environment variable: {key}")
    return v



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'replace-me-dev-secret-key')
ALLOWED_HOSTS = ['192.168.18.4','localhost','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'rest_framework',
    'users',
    'corsheaders',
    'connections',
    'notifications',
]

APPEND_SLASH=False

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
CORS_ALLOWED_ORIGINS = [
   'http://localhost:3000'
]
WSGI_APPLICATION = 'backend.wsgi.application'
CORS_ALLOW_ALL_ORIGINS = True #for development only otherwise set to false
DEBUG = True
# If you're using cookies / credentials:
CORS_ALLOW_CREDENTIALS = True
from datetime import timedelta
REST_FRAMEWORK = {
    # Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # Permissions
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    # Throttling
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10/minute',
        'user': '1000/day',
        'login': '5/minute',  # for custom login throttle
    },
}


SIMPLE_JWT = {
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.SlidingToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    'ALGORITHM': 'HS256',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'user_id',  # Point to your custom primary key field
    'USER_ID_CLAIM': 'user_id',  # Custom claim name in token payload
}
AUTH_USER_MODEL = 'users.AppUser'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]





# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL   = os.getenv('DEFAULT_FROM_EMAIL')
CLEANUP_NOTIFICATION_RECIPIENTS = [os.getenv('CLEANUP_NOTIFICATION_RECIPIENTS')] 
LANGUAGE_CODE = 'en-us'
TIME_ZONE = "Asia/Kathmandu" 
USE_I18N = True
USE_TZ = True
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field





# Hard-coded settings (no env lookups)
INACTIVITY_DAYS = 30

# Redis / Celery (use Docker service name 'redis' so it works inside Compose)
REDIS_URL = os.getenv('REDIS_URL')
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND')

CELERY_CACHE_BACKEND = os.getenv('CELERY_CACHE_BACKEND', 'default')
CELERY_TIMEZONE = "Asia/Kathmandu" 
CELERY_ENABLE_UTC=True
# Use django-celery-beat scheduler if you installed it
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# -------- Channels / ASGI ----------
ASGI_APPLICATION = 'user_backend.asgi.application'

# Hard-coded cache settings (no env lookups)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv('CACHE_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": os.getenv('REDIS_PASSWORD', None),
        },
    }
}


# -------- Logging (keep your previous logger) ----------
LOGGING = globals().get('LOGGING', {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {'console': {'class': 'logging.StreamHandler'}},
    'loggers': {},
})
LOGGING.setdefault('handlers', {}).setdefault('console', {'class': 'logging.StreamHandler'})
LOGGING.setdefault('loggers', {})['users.utils'] = {
    'handlers': ['console'],
    'level': 'INFO',
    'propagate': False,
}